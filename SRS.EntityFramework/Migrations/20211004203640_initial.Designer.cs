// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SRS.EntityFramework;

namespace SRS.EntityFramework.Migrations
{
    [DbContext(typeof(SRSDbContext))]
    [Migration("20211004203640_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("FactPerson", b =>
                {
                    b.Property<int>("FactsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PeopleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FactsId", "PeopleId");

                    b.HasIndex("PeopleId");

                    b.ToTable("FactPerson");
                });

            modelBuilder.Entity("NotePerson", b =>
                {
                    b.Property<int>("NotesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PeopleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("NotesId", "PeopleId");

                    b.HasIndex("PeopleId");

                    b.ToTable("NotePerson");
                });

            modelBuilder.Entity("NoteReference", b =>
                {
                    b.Property<int>("NotesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReferencesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("NotesId", "ReferencesId");

                    b.HasIndex("ReferencesId");

                    b.ToTable("NoteReference");
                });

            modelBuilder.Entity("SRS.Domain.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlternateName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MaternalSurname")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaternalSurname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReferenceId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecondName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("ReferenceId1");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("SRS.Domain.Models.Community", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Communities");
                });

            modelBuilder.Entity("SRS.Domain.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EventType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("SRS.Domain.Models.Fact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Facts");
                });

            modelBuilder.Entity("SRS.Domain.Models.Family", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentOne")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentTwo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("SRS.Domain.Models.Household", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CommunityId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("MovedInDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("LocationId");

                    b.ToTable("Households");
                });

            modelBuilder.Entity("SRS.Domain.Models.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileExtension")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileLocation")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double?>("FileSize")
                        .HasColumnType("REAL");

                    b.Property<int?>("NoteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("NoteId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("SRS.Domain.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModified")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FactId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HouseholdId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NoteType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("FactId");

                    b.HasIndex("HouseholdId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("SRS.Domain.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlternateName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("BirthPlaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CommunityId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DeathPlaceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Education")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FamilyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Hand")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("HasChildren")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HouseholdId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsMarried")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MaternalSurname")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaternalSurname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RelationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Religion")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ResidenceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecondName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BirthPlaceId");

                    b.HasIndex("CommunityId");

                    b.HasIndex("DeathPlaceId");

                    b.HasIndex("EventId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("HouseholdId");

                    b.HasIndex("RelationId");

                    b.HasIndex("ResidenceId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("SRS.Domain.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("AccessibleByPlane")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("AccessibleByRiver")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("AccessibleByRoad")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("AccessibleByTrail")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("AlternateName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DesertedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("District")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FactId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FoundationDate")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("HasElectricity")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("HasPotableWater")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Latitude")
                        .HasColumnType("TEXT");

                    b.Property<string>("Longitude")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentPlaceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PlaceType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Population")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Province")
                        .HasColumnType("TEXT");

                    b.Property<string>("ZipCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("FactId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("SRS.Domain.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SRS.Domain.Models.Reference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateLastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FactId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Pages")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PubType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicationTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("Publisher")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublisherLocation")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReferenceFileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("FactId");

                    b.HasIndex("ReferenceFileId");

                    b.ToTable("References");
                });

            modelBuilder.Entity("SRS.Domain.Models.Relation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PedigreeLink")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PersonOneId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PersonTwoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RelationTerm")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RelationType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReverseRelationTerm")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("SRS.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FactPerson", b =>
                {
                    b.HasOne("SRS.Domain.Models.Fact", null)
                        .WithMany()
                        .HasForeignKey("FactsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SRS.Domain.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NotePerson", b =>
                {
                    b.HasOne("SRS.Domain.Models.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SRS.Domain.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteReference", b =>
                {
                    b.HasOne("SRS.Domain.Models.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SRS.Domain.Models.Reference", null)
                        .WithMany()
                        .HasForeignKey("ReferencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SRS.Domain.Models.Author", b =>
                {
                    b.HasOne("SRS.Domain.Models.Reference", null)
                        .WithMany("Authors")
                        .HasForeignKey("ReferenceId");

                    b.HasOne("SRS.Domain.Models.Reference", null)
                        .WithMany("Editors")
                        .HasForeignKey("ReferenceId1");
                });

            modelBuilder.Entity("SRS.Domain.Models.Community", b =>
                {
                    b.HasOne("SRS.Domain.Models.Place", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SRS.Domain.Models.Household", b =>
                {
                    b.HasOne("SRS.Domain.Models.Community", null)
                        .WithMany("Households")
                        .HasForeignKey("CommunityId");

                    b.HasOne("SRS.Domain.Models.Place", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SRS.Domain.Models.Media", b =>
                {
                    b.HasOne("SRS.Domain.Models.Event", null)
                        .WithMany("Media")
                        .HasForeignKey("EventId");

                    b.HasOne("SRS.Domain.Models.Note", null)
                        .WithMany("MediaList")
                        .HasForeignKey("NoteId");
                });

            modelBuilder.Entity("SRS.Domain.Models.Note", b =>
                {
                    b.HasOne("SRS.Domain.Models.Event", null)
                        .WithMany("Notes")
                        .HasForeignKey("EventId");

                    b.HasOne("SRS.Domain.Models.Fact", null)
                        .WithMany("Notes")
                        .HasForeignKey("FactId");

                    b.HasOne("SRS.Domain.Models.Household", null)
                        .WithMany("Notes")
                        .HasForeignKey("HouseholdId");
                });

            modelBuilder.Entity("SRS.Domain.Models.Person", b =>
                {
                    b.HasOne("SRS.Domain.Models.Place", "BirthPlace")
                        .WithMany()
                        .HasForeignKey("BirthPlaceId");

                    b.HasOne("SRS.Domain.Models.Community", null)
                        .WithMany("People")
                        .HasForeignKey("CommunityId");

                    b.HasOne("SRS.Domain.Models.Place", "DeathPlace")
                        .WithMany()
                        .HasForeignKey("DeathPlaceId");

                    b.HasOne("SRS.Domain.Models.Event", null)
                        .WithMany("Participants")
                        .HasForeignKey("EventId");

                    b.HasOne("SRS.Domain.Models.Family", null)
                        .WithMany("Kids")
                        .HasForeignKey("FamilyId");

                    b.HasOne("SRS.Domain.Models.Household", null)
                        .WithMany("People")
                        .HasForeignKey("HouseholdId");

                    b.HasOne("SRS.Domain.Models.Relation", null)
                        .WithMany("Offspring")
                        .HasForeignKey("RelationId");

                    b.HasOne("SRS.Domain.Models.Place", "Residence")
                        .WithMany()
                        .HasForeignKey("ResidenceId");

                    b.Navigation("BirthPlace");

                    b.Navigation("DeathPlace");

                    b.Navigation("Residence");
                });

            modelBuilder.Entity("SRS.Domain.Models.Place", b =>
                {
                    b.HasOne("SRS.Domain.Models.Event", null)
                        .WithMany("Places")
                        .HasForeignKey("EventId");

                    b.HasOne("SRS.Domain.Models.Fact", null)
                        .WithMany("Places")
                        .HasForeignKey("FactId");
                });

            modelBuilder.Entity("SRS.Domain.Models.Project", b =>
                {
                    b.HasOne("SRS.Domain.Models.User", null)
                        .WithMany("Projects")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SRS.Domain.Models.Reference", b =>
                {
                    b.HasOne("SRS.Domain.Models.Event", null)
                        .WithMany("References")
                        .HasForeignKey("EventId");

                    b.HasOne("SRS.Domain.Models.Fact", null)
                        .WithMany("References")
                        .HasForeignKey("FactId");

                    b.HasOne("SRS.Domain.Models.Media", "ReferenceFile")
                        .WithMany()
                        .HasForeignKey("ReferenceFileId");

                    b.Navigation("ReferenceFile");
                });

            modelBuilder.Entity("SRS.Domain.Models.Community", b =>
                {
                    b.Navigation("Households");

                    b.Navigation("People");
                });

            modelBuilder.Entity("SRS.Domain.Models.Event", b =>
                {
                    b.Navigation("Media");

                    b.Navigation("Notes");

                    b.Navigation("Participants");

                    b.Navigation("Places");

                    b.Navigation("References");
                });

            modelBuilder.Entity("SRS.Domain.Models.Fact", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("Places");

                    b.Navigation("References");
                });

            modelBuilder.Entity("SRS.Domain.Models.Family", b =>
                {
                    b.Navigation("Kids");
                });

            modelBuilder.Entity("SRS.Domain.Models.Household", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("People");
                });

            modelBuilder.Entity("SRS.Domain.Models.Note", b =>
                {
                    b.Navigation("MediaList");
                });

            modelBuilder.Entity("SRS.Domain.Models.Reference", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Editors");
                });

            modelBuilder.Entity("SRS.Domain.Models.Relation", b =>
                {
                    b.Navigation("Offspring");
                });

            modelBuilder.Entity("SRS.Domain.Models.User", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
